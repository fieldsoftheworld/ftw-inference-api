openapi: 3.1.0
jsonSchemaDialect: 'https://json-schema.org/draft/2020-12/schema'
info:
  title: Fields of the World - Web API
  description: |-
    The API for a web application that runs the FTW tooling on the web through a RESTful interface.
  version: 0.1.0
servers:
  - url: http://api.fieldsofthe.world
    description: Production server
  - url: http://localhost:8000
    description: Local development server
paths:
  /:
    get:
      tags:
        - System
      summary: Returns the basic server capabilities.
      operationId: connect
      description: |-
        This is the landing page of the API.
        It provides information about the server's capabilities and available endpoints.
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version:
                    type: string
                    const: 0.1.0
                    description: The version of the API (see `info.version`)
                  title:
                    type: string
                    description: The title of the API
                  description:
                    type: string
                    description: A description of the API
                  min_area_km2:
                    type: number
                    minimum: 0
                  max_area_km2:
                    type: number
                    minimum: 0
                  models:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The id of the model
                        title:
                          type: string
                          description: The title of the model
                        description:
                          type: string
                          description: A description of the model
                        license:
                          type: string
                          description: The license of the model
                        version:
                          type: string
                          description: The version of the model
  /health:
    get:
      tags:
        - System
      summary: Health check endpoint
      operationId: getHealth
      description: |-
        This endpoint returns the health status of the service.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy]
                    description: Health status
        5XX:
          $ref: '#/components/responses/5XX'
  /example:
    put:
      tags:
        - Synchronous Processing
      summary: Compute polygons for a small area quickly
      operationId: getExample
      description: |-
        This endpoint returns computed field boundaries over a small area and
        returns them as polygons in GeoJSON format synchronously.

        This is a synchronous endpoint that processes small areas (<500kmÂ²) immediately
        and returns results directly. For larger areas or asynchronous processing,
        use the project-based workflow.

        Errors if the area is too large.
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - inference
                - polygons
              properties:
                inference:
                  $ref: '#/components/schemas/InferenceParameters'
                polygons:
                  $ref: '#/components/schemas/PolygonizationParameters'
              example:
                inference:
                  model: 3_Class_FULL_FTW_Pretrained
                  images:
                  - https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2B_MSIL2A_20210617T100559_R022_T33UUP_20210624T063729
                  - https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2B_MSIL2A_20210925T101019_R022_T33UUP_20210926T121923
                  bbox:
                    - 13
                    - 48
                    - 13.1
                    - 48.1
                  resize_factor: 2
                  patch_size: 256
                  padding: 16
                polygons:
                  simplify: 15
                  min_size: 150
                  close_interiors: true
      responses:
        '200':
          description: The GeoJSON with the polygons after polygponization.
          content:
            application/geo+json:
              schema:
                $ref: 'https://geojson.org/schema/FeatureCollection.json'
            application/x-ndjson:
              schema:
                type: string
        503:
          description: Service is busy, retry later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        504:
          description: Request timed out. Please try a smaller area.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  /projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      operationId: createProject
      description: |-
        This endpoint creates a new project for the authenticated user.
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the project
      responses:
        201:
          description: A JSON object with the created project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    get:
      tags:
        - Projects
      summary: List of available projects
      operationId: getProjects
      description: |-
        This endpoint returns a list of available projects for the user.
      security:
        - bearer: []
      responses:
        '200':
          description: A list of projects for the authenticated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
  /projects/{project_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - Projects
      summary: Get project details
      operationId: getProject
      description: |-
        This endpoint returns the details of a specific project.
      security:
        - bearer: []
      responses:
        '200':
          description: A JSON object with the project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    delete:
      tags:
        - Projects
      summary: Delete a project
      operationId: deleteProject
      description: |-
        This endpoint deletes a specific project.
      security:
        - bearer: []
      responses:
        '204':
          description: The project has been deleted.
  /projects/{project_id}/inference:
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - Results
      summary: Get inference results
      operationId: getInferenceResults
      description: |-
        This endpoint returns the inference results for a project.
        Results can be returned as JSON with signed URLs, or as direct file downloads.
      security:
        - bearer: []
      responses:
        '200':
          description: Inference results
          content:
            application/json:
              schema:
                type: object
                properties:
                  inference:
                    type: string
                    format: uri
                    nullable: true
                    description: Signed URL to inference GeoTIFF file
                  polygons:
                    type: string
                    format: uri
                    nullable: true
                    description: Signed URL to polygons GeoJSON file
            application/geo+json:
              schema:
                $ref: 'https://geojson.org/schema/FeatureCollection.json'
            image/tiff:
              schema:
                type: string
                format: binary
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
    put:
      tags:
        - Asynchronous Processing
      summary: Run inference
      operationId: inference
      description: |-
        This endpoint takes raster images and starts asynchronous processing.

        This is an asynchronous endpoint that queues inference tasks for background
        processing. Use the task ID returned to monitor progress and retrieve results
        when complete.
      security:
        - bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceParameters'
      responses:
        '202':
          description: Successfully queued for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSubmission'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  /projects/{project_id}/status:
    parameters:
      - $ref: '#/components/parameters/project_id'
    get:
      tags:
        - Projects
      summary: Get project status with task details
      operationId: getProjectStatus
      description: |-
        This endpoint returns the current status of a project including task details.
        Provides more detailed information than the basic project endpoint.
      security:
        - bearer: []
      responses:
        '200':
          description: Project status with task information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectStatus'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  /projects/{project_id}/tasks/{task_id}:
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/task_id'
    get:
      tags:
        - Tasks
      summary: Get task details
      operationId: getTaskDetails
      description: |-
        This endpoint returns detailed information about a specific task within a project.
      security:
        - bearer: []
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  /projects/{project_id}/images/{window}:
    put:
      tags:
        - Images
      summary: Upload a raster image to a project
      operationId: uploadImage
      description: |-
        This endpoint uploads a raster image to a specific project.
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/project_id'
        - name: window
          in: path
          required: true
          description: The window of the image to upload
          schema:
            type: string
            enum:
              - a
              - b
      requestBody:
        required: true
        content:
          image/tiff:
            schema:
              type: string
              format: binary
              description: The raster image to upload
      responses:
        '201':
          description: Upload succeeded.
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
  /projects/{project_id}/polygons:
    put:
      tags:
        - Asynchronous Processing
      summary: Run polygponization
      operationId: polygonize
      description: |-
        This endpoint queues an asynchronous polygonization step in addition to the inference step.

        This is an asynchronous endpoint that processes polygonization in the background.
        Could also be used to run polygponization on an existing inference result,
        i.e. re-runs polygonization with different parameters if desired.

        Use the task ID returned to monitor progress and retrieve results when complete.
      security:
        - bearer: []
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InferenceParameters'
      responses:
        '202':
          description: Successfully queued for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSubmission'
        4XX:
          $ref: '#/components/responses/4XX'
        5XX:
          $ref: '#/components/responses/5XX'
components:
  parameters:
    project_id:
      name: project_id
      in: path
      required: true
      description: The ID of the project
      schema:
        type: string
    task_id:
      name: task_id
      in: path
      required: true
      description: The ID of the task
      schema:
        type: string
  responses:
    4XX:
      description: Client error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    5XX:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    InferenceParameters:
      type: object
      required:
        - model
        - images
      properties:
        bbox:
          type: array
          description: |-
            The bounding box of the area to run inference on.
            The coordinates are in the order [minX, minY, maxX, maxY].
            The coordinates are provided in EPSG:4326.
            If not provided, the bounding box will be calculated from the images.
          items:
            type: number
          minItems: 4
          maxItems: 4
        model:
          type: string
          description: The id of the model to use for inference, must be one of the IDs made available through `GET /`
        images:
          oneOf:
            - type: 'null'
              description: >
                No images provided, inference will be run on the two images uploaded to the project.
                Errors when no impages are uploaded (or the request is synchronously executed).
            - type: array
              description: A list of two publicly accessible image URLs (window A and B) to run inference on
              minItems: 2
              maxItems: 2
              items:
                type: string
                format: url
                description: The raster image to run inference on
        resize_factor:
          type: number
          description: |-
            Resize factor to use for inference.
          default: 2
        patch_size:
          default: null
          oneOf:
            - type: 'null'
              description: |-
                No patch size provided, will determine reasonable default based on the image size.
            - type: integer
              description: |-
                Size of patch to use for inference, should be a power of 2.
        padding:
          type: integer
          description: |-
            Pixels to discard from each side of the patch.
          default: null
    PolygonizationParameters:
      type: object
      description: Polygonization parameters
      properties:
        simplify:
          type: number
          description: |-
            Simplification factor to use when polygonizing in the unit of the CRS, e.g. meters for Sentinel-2 imagery in UTM.
            Set to 0 to disable simplification.
          default: 15
        min_size:
          type: number
          description: |-
            Minimum area size in square meters to include in the output.
          default: 500
        close_interiors:
          type: boolean
          description: |-
            Remove the interiors holes in the polygons if set to `true`.
          default: false
    Error:
      type: object
      properties:
        detail:
          type: string
          description: The error message
    Project:
      type: object
      required:
        - id
        - title
        - status
        - created_at
        - parameters
        - results
      properties:
        id:
          type: string
          description: The id of the project
        title:
          type: string
          description: The title of the project
        status:
          type: string
          description: |-
            The status of a queued inference run.

            - Set to `created` by default when the project has been created.
            - Set to `queued` when the project is queued for processing.
            - Set to `running` when the project is being processed.
            - Set to `completed` when the project has been processed and the results are available.
            - Set to `failed` when the project has failed to process.
          enum:
            - created
            - queued
            - running
            - completed
            - failed
        progress:
          default: null
          oneOf:
            - type: 'null'
            - type: number
              description: The progress of a queued run (0-100%)
              minimum: 0
              maximum: 100
        created_at:
          type: string
          format: date-time
          description: The creation date of the project
        parameters:
          type: object
          description: Project parameters as a flexible dictionary
          additionalProperties: true
        results:
          type: object
          required:
            - inference
            - polygons
          properties:
            inference:
              default: null
              oneOf:
                - type: 'null'
                  description: No inference image available
                - type: string
                  format: uri
                  description: |-
                    The (signed) URL to the inference results.
                    Content type is `image/tiff; application=geotiff; cloud-optimized=true`.
            polygons:
              default: null
              oneOf:
                - type: 'null'
                  description: No polygons available
                - type: string
                  format: uri
                  description: |-
                    The (signed) URL to the polygons.
                    Content type is `application/geo+json` or `application/x-ndjson`.
    TaskSubmission:
      type: object
      required:
        - message
        - task_id
        - project_id
        - status
      properties:
        message:
          type: string
          description: Human-readable message about the task submission
        task_id:
          type: string
          description: Unique identifier for the submitted task
        project_id:
          type: string
          description: The project ID this task belongs to
        status:
          type: string
          enum: [queued]
          description: Current status of the task
    ProjectStatus:
      type: object
      required:
        - project_id
        - status
        - parameters
      properties:
        project_id:
          type: string
          description: The project ID
        status:
          type: string
          enum: [created, queued, running, completed, failed]
          description: Current project status
        progress:
          type: number
          nullable: true
          minimum: 0
          maximum: 100
          description: Progress percentage (0-100)
        parameters:
          type: object
          description: Project parameters as a flexible dictionary
          additionalProperties: true
        task:
          $ref: '#/components/schemas/TaskInfo'
          nullable: true
          description: Current inference task information
        polygonize_task:
          $ref: '#/components/schemas/TaskInfo'
          nullable: true
          description: Current polygonization task information
    TaskDetails:
      type: object
      required:
        - task_id
        - task_type
        - status
        - project_id
      properties:
        task_id:
          type: string
          description: Unique task identifier
        task_type:
          type: string
          enum: [inference, polygonize]
          description: Type of task
        status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current task status
        project_id:
          type: string
          description: Associated project ID
        created_at:
          type: string
          format: date-time
          nullable: true
          description: Task creation timestamp
        started_at:
          type: string
          format: date-time
          nullable: true
          description: Task start timestamp
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: Task completion timestamp
        error:
          type: string
          nullable: true
          description: Error message if task failed
        result:
          type: object
          nullable: true
          description: Task result data
          additionalProperties: true
    TaskInfo:
      type: object
      required:
        - task_id
        - task_type
        - task_status
      properties:
        task_id:
          type: string
          description: Unique task identifier
        task_type:
          type: string
          enum: [inference, polygonize]
          description: Type of task
        task_status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current task status
        created_at:
          type: string
          format: date-time
          nullable: true
          description: Task creation timestamp
        started_at:
          type: string
          format: date-time
          nullable: true
          description: Task start timestamp
        completed_at:
          type: string
          format: date-time
          nullable: true
          description: Task completion timestamp
        error:
          type: string
          nullable: true
          description: Error message if task failed
  securitySchemes:
    bearer:
      description: Bearer token
      type: http
      scheme: Bearer
